import numpy as np
from typing import Tuple
from helpers import PATH_DATA
import os
import json

HALF_DECK_SIZE = 26


class DeckGenerator:
    def __init__(self, seed: int, half_deck_size: int = HALF_DECK_SIZE):
        self.seed = seed
        self.half_deck_size = half_deck_size
        self.init_deck = [0] * half_deck_size + [1] * half_deck_size
        self.rng = np.random.default_rng(seed)
        # Check if state exists, if so load it, otherwise create a new save
        state = self.load_rng_state()
        if state:
            self.rng.bit_generator.state = state
        else:
            self._save_rng_state()

    def get_decks(self, n_decks: int) -> np.ndarray:
        """
        Efficiently generate `n_decks` shuffled decks using NumPy.

        Returns:
            Array where each row is a shuffled deck.
        """
        self.rng.bit_generator.state = self.load_rng_state()
        decks = np.tile(self.init_deck, (n_decks, 1))
        self.rng.permuted(decks, axis=1, out=decks)
        return decks

    def store_decks(self, decks: np.ndarray) -> None:
        """
        Store generated decks in a .NPY file.
        """
        self._save_rng_state()
        np.save(f"{PATH_DATA}/{self.seed}.npy", decks)

    def _save_rng_state(self) -> None:
        with open(f"{PATH_DATA}/{self.seed}state.json", "w") as f:
            json.dump(self.rng.bit_generator.state, f)

    def load_rng_state(self) -> None:
        if os.path.exists(f"{PATH_DATA}/{self.seed}state.json"):
            with open(f"{PATH_DATA}/{self.seed}state.json", "r") as f:
                state = json.load(f)
                return state
        else:
            return None

    def load_decks(self) -> np.ndarray:
        """
        Load previously stored decks from a .NPY file.

        Returns:
            Array where each row is a shuffled deck.
        """
        return np.load(f"{PATH_DATA}/{self.seed}.npy")

    # Write a function that stores the data generated by get_decks()
    # Make sure you can generate some decks, and then generate some additional decks
    #   without losing track of the random seeds used
    #
    # Make sure you can duplicate your results, i.e get the exact same decks twice
